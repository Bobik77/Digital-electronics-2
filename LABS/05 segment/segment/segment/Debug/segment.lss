
segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000324  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e11  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084f  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059e  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000020e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000462  00000000  00000000  0000271b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 10 01 	call	0x220	; 0x220 <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(0b00000000, 0b11110000);
  f4:	60 ef       	ldi	r22, 0xF0	; 240
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 20 01 	call	0x240	; 0x240 <SEG_update_shift_regs>
    SEG_clear();
  fc:	0e 94 8b 01 	call	0x316	; 0x316 <SEG_clear>
    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 100:	e1 e8       	ldi	r30, 0x81	; 129
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	80 83       	st	Z, r24
 10a:	80 81       	ld	r24, Z
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 110:	ef e6       	ldi	r30, 0x6F	; 111
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
    TIM0_overflow_4ms();
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	8c 7f       	andi	r24, 0xFC	; 252
 11e:	85 bd       	out	0x25, r24	; 37
 120:	85 b5       	in	r24, 0x25	; 37
 122:	84 60       	ori	r24, 0x04	; 4
 124:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 126:	ee e6       	ldi	r30, 0x6E	; 110
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24


    // Enables interrupts by setting the global interrupt mask
    sei();
 130:	78 94       	sei
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x42>

00000134 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect) //slow timer
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
    // WRITE YOUR CODE HERE
    static uint8_t counter = 255;
    counter ++;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	8f 5f       	subi	r24, 0xFF	; 255
    if (counter == 10) counter= 0;
 15c:	8a 30       	cpi	r24, 0x0A	; 10
 15e:	19 f0       	breq	.+6      	; 0x166 <__vector_13+0x32>
 **********************************************************************/
ISR(TIMER1_OVF_vect) //slow timer
{
    // WRITE YOUR CODE HERE
    static uint8_t counter = 255;
    counter ++;
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 164:	02 c0       	rjmp	.+4      	; 0x16a <__vector_13+0x36>
    if (counter == 10) counter= 0;
 166:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    digit_1=2;
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <digit_1>
    digit_2=3;
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <digit_2>
       SEG_update_shift_regs(segment_value[2],segment_position[0]);
 176:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <segment_position>
 17a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <segment_value+0x2>
 17e:	0e 94 20 01 	call	0x240	; 0x240 <SEG_update_shift_regs>
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_9>:

ISR(TIMER2_OVF_vect) //fast timer
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
    SEG_update_shift_regs(segment_value[2],segment_position[0]);
 1c6:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <segment_position>
 1ca:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <segment_value+0x2>
 1ce:	0e 94 20 01 	call	0x240	; 0x240 <SEG_update_shift_regs>
   static uint8_t pos=0;
   if (pos==0)
 1d2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1d6:	81 11       	cpse	r24, r1
 1d8:	0a c0       	rjmp	.+20     	; 0x1ee <__vector_9+0x4a>
   {
    SEG_update_shift_regs(segment_value[2],segment_position[0]);
 1da:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <segment_position>
 1de:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <segment_value+0x2>
 1e2:	0e 94 20 01 	call	0x240	; 0x240 <SEG_update_shift_regs>
    pos = 1;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 1ec:	08 c0       	rjmp	.+16     	; 0x1fe <__vector_9+0x5a>
   }
   else
   {
    SEG_update_shift_regs(segment_value[1],segment_position[1]);
 1ee:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <segment_position+0x1>
 1f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <segment_value+0x1>
 1f6:	0e 94 20 01 	call	0x240	; 0x240 <SEG_update_shift_regs>
    pos = 0;
 1fa:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
   }       
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 22a:	67 e0       	ldi	r22, 0x07	; 7
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	84 e2       	ldi	r24, 0x24	; 36
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 23e:	08 95       	ret

00000240 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	18 2f       	mov	r17, r24
 248:	d6 2f       	mov	r29, r22
    uint8_t bit_number;

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PIND, SEG_LATCH);
 24a:	64 e0       	ldi	r22, 0x04	; 4
 24c:	89 e2       	ldi	r24, 0x29	; 41
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PIND, SEG_CLK);
 254:	67 e0       	ldi	r22, 0x07	; 7
 256:	89 e2       	ldi	r24, 0x29	; 41
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	85 e2       	ldi	r24, 0x25	; 37
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	85 e0       	ldi	r24, 0x05	; 5
 26a:	8a 95       	dec	r24
 26c:	f1 f7       	brne	.-4      	; 0x26a <SEG_update_shift_regs+0x2a>
 26e:	00 00       	nop
 270:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if (segments & (1<<0)){
 272:	10 ff       	sbrs	r17, 0
 274:	06 c0       	rjmp	.+12     	; 0x282 <SEG_update_shift_regs+0x42>
            GPIO_write_high(&PORTB, SEG_DATA); //turn on
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	85 e2       	ldi	r24, 0x25	; 37
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 280:	05 c0       	rjmp	.+10     	; 0x28c <SEG_update_shift_regs+0x4c>
        }
        else{
            GPIO_write_low(&PORTB, SEG_DATA); //turn off
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <SEG_update_shift_regs+0x4e>
 292:	00 00       	nop
        }        
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 294:	67 e0       	ldi	r22, 0x07	; 7
 296:	8b e2       	ldi	r24, 0x2B	; 43
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 29e:	85 e0       	ldi	r24, 0x05	; 5
 2a0:	8a 95       	dec	r24
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <SEG_update_shift_regs+0x60>
 2a4:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 2a6:	67 e0       	ldi	r22, 0x07	; 7
 2a8:	8b e2       	ldi	r24, 0x2B	; 43
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 2b0:	16 95       	lsr	r17
 2b2:	c1 50       	subi	r28, 0x01	; 1
  
    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2b4:	f1 f6       	brne	.-68     	; 0x272 <SEG_update_shift_regs+0x32>
 2b6:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if (position & (1<<0)){  
 2b8:	d0 ff       	sbrs	r29, 0
 2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <SEG_update_shift_regs+0x88>
            GPIO_write_high(&PORTB, SEG_DATA); //turn on
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	85 e2       	ldi	r24, 0x25	; 37
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2c6:	05 c0       	rjmp	.+10     	; 0x2d2 <SEG_update_shift_regs+0x92>
        } 
        else{
            GPIO_write_low(&PORTB, SEG_DATA); //turn off
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <SEG_update_shift_regs+0x94>
 2d8:	00 00       	nop
        }
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 2da:	67 e0       	ldi	r22, 0x07	; 7
 2dc:	8b e2       	ldi	r24, 0x2B	; 43
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <SEG_update_shift_regs+0xa6>
 2ea:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 2ec:	67 e0       	ldi	r22, 0x07	; 7
 2ee:	8b e2       	ldi	r24, 0x2B	; 43
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 2f6:	d6 95       	lsr	r29
 2f8:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2fa:	f1 f6       	brne	.-68     	; 0x2b8 <SEG_update_shift_regs+0x78>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	8b e2       	ldi	r24, 0x2B	; 43
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 306:	85 e0       	ldi	r24, 0x05	; 5
 308:	8a 95       	dec	r24
 30a:	f1 f7       	brne	.-4      	; 0x308 <SEG_update_shift_regs+0xc8>
 30c:	00 00       	nop
    // Wait 1 us
    _delay_us(1);

}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	08 95       	ret

00000316 <SEG_clear>:
/**********************************************************************
 * Function: SEG_clear()
 **********************************************************************/
void SEG_clear()
{
    SEG_update_shift_regs(0b11111111,0b00000000);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	0e 94 20 01 	call	0x240	; 0x240 <SEG_update_shift_regs>
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
