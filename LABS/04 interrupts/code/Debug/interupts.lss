
interupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000add  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  00000ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003da  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c1  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000128  00000000  00000000  00001e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001f79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 89 00 	call	0x112	; 0x112 <main>
  88:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_config_input_pullup>:
  a8:	fc 01       	movw	r30, r24
  aa:	80 81       	ld	r24, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_config_input_pullup+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_config_input_pullup+0xa>
  ba:	92 2f       	mov	r25, r18
  bc:	90 95       	com	r25
  be:	89 23       	and	r24, r25
  c0:	80 83       	st	Z, r24
  c2:	81 81       	ldd	r24, Z+1	; 0x01
  c4:	28 2b       	or	r18, r24
  c6:	21 83       	std	Z+1, r18	; 0x01
  c8:	08 95       	ret

000000ca <GPIO_write_low>:
  ca:	fc 01       	movw	r30, r24
  cc:	90 81       	ld	r25, Z
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <GPIO_write_low+0xe>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <GPIO_write_low+0xa>
  dc:	20 95       	com	r18
  de:	29 23       	and	r18, r25
  e0:	20 83       	st	Z, r18
  e2:	08 95       	ret

000000e4 <GPIO_write_high>:
  e4:	fc 01       	movw	r30, r24
  e6:	40 81       	ld	r20, Z
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <GPIO_write_high+0xe>
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <GPIO_write_high+0xa>
  f6:	24 2b       	or	r18, r20
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_read>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
    return  (*reg_name & (1<<pin_num));
  fc:	fc 01       	movw	r30, r24
  fe:	20 81       	ld	r18, Z
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_read+0xe>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_read+0xa>
 10e:	82 23       	and	r24, r18
 110:	08 95       	ret

00000112 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
 112:	65 e0       	ldi	r22, 0x05	; 5
 114:	84 e2       	ldi	r24, 0x24	; 36
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D4);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	85 e2       	ldi	r24, 0x25	; 37
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 65 00 	call	0xca	; 0xca <GPIO_write_low>
    GPIO_config_output(&DDRB, LED_D2);
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	84 e2       	ldi	r24, 0x24	; 36
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D4);
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	85 e2       	ldi	r24, 0x25	; 37
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 65 00 	call	0xca	; 0xca <GPIO_write_low>
    GPIO_config_output(&DDRB, LED_D3);
 13a:	63 e0       	ldi	r22, 0x03	; 3
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D4);
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	85 e2       	ldi	r24, 0x25	; 37
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 65 00 	call	0xca	; 0xca <GPIO_write_low>
    GPIO_config_output(&DDRB, LED_D4);
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	84 e2       	ldi	r24, 0x24	; 36
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D4);
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	85 e2       	ldi	r24, 0x25	; 37
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 65 00 	call	0xca	; 0xca <GPIO_write_low>

    // pushbutton config
    GPIO_config_input_pullup(&DDRD, PUSH_BTN);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	8a e2       	ldi	r24, 0x2A	; 42
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_config_input_pullup>
    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_33ms();
 16c:	e1 e8       	ldi	r30, 0x81	; 129
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8a 7f       	andi	r24, 0xFA	; 250
 174:	80 83       	st	Z, r24
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 17c:	ef e6       	ldi	r30, 0x6F	; 111
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	81 60       	ori	r24, 0x01	; 1
 184:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 186:	78 94       	sei
    // Infinite loop
    while (1)
    {
        /* Empty loop. All subsequent operations are performed exclusively 
         * inside interrupt service routines ISRs */
        if (GPIO_read(&PIND,PUSH_BTN)) {TIM1_overflow_33ms();}  else{ TIM1_overflow_262ms();}
 188:	c1 e8       	ldi	r28, 0x81	; 129
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	89 e2       	ldi	r24, 0x29	; 41
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_read>
 196:	88 23       	and	r24, r24
 198:	39 f0       	breq	.+14     	; 0x1a8 <main+0x96>
 19a:	88 81       	ld	r24, Y
 19c:	8a 7f       	andi	r24, 0xFA	; 250
 19e:	88 83       	st	Y, r24
 1a0:	88 81       	ld	r24, Y
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	88 83       	st	Y, r24
 1a6:	f2 cf       	rjmp	.-28     	; 0x18c <main+0x7a>
 1a8:	88 81       	ld	r24, Y
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	88 83       	st	Y, r24
 1ae:	88 81       	ld	r24, Y
 1b0:	83 60       	ori	r24, 0x03	; 3
 1b2:	88 83       	st	Y, r24
 1b4:	eb cf       	rjmp	.-42     	; 0x18c <main+0x7a>

000001b6 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{   
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
    static uint8_t i=0;
    static uint8_t c=0;
    if (c == 0) i++; else i--;  
 1d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <c.1629>
 1dc:	81 11       	cpse	r24, r1
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <__vector_13+0x36>
 1e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <__vector_13+0x40>
 1ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    if (i == 3)  c=1;
 1f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	21 f4       	brne	.+8      	; 0x206 <__vector_13+0x50>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <c.1629>
 204:	04 c0       	rjmp	.+8      	; 0x20e <__vector_13+0x58>
    if (i == 0)  c=0;
 206:	81 11       	cpse	r24, r1
 208:	02 c0       	rjmp	.+4      	; 0x20e <__vector_13+0x58>
 20a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <c.1629>

    
    //actuation
    GPIO_write_high(&PORTB,LED_D1);
 20e:	65 e0       	ldi	r22, 0x05	; 5
 210:	85 e2       	ldi	r24, 0x25	; 37
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_write_high>
    GPIO_write_high(&PORTB,LED_D2);
 218:	64 e0       	ldi	r22, 0x04	; 4
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_write_high>
    GPIO_write_high(&PORTB,LED_D3);
 222:	63 e0       	ldi	r22, 0x03	; 3
 224:	85 e2       	ldi	r24, 0x25	; 37
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_write_high>
    GPIO_write_high(&PORTB,LED_D4);
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	85 e2       	ldi	r24, 0x25	; 37
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_write_high>
    switch(i)
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	61 f0       	breq	.+24     	; 0x256 <__vector_13+0xa0>
 23e:	28 f0       	brcs	.+10     	; 0x24a <__vector_13+0x94>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	79 f0       	breq	.+30     	; 0x262 <__vector_13+0xac>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	99 f0       	breq	.+38     	; 0x26e <__vector_13+0xb8>
 248:	17 c0       	rjmp	.+46     	; 0x278 <__vector_13+0xc2>
    {
        case 0:
         GPIO_write_low(&PORTB,LED_D1);
 24a:	65 e0       	ldi	r22, 0x05	; 5
 24c:	85 e2       	ldi	r24, 0x25	; 37
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 65 00 	call	0xca	; 0xca <GPIO_write_low>
         break;
 254:	11 c0       	rjmp	.+34     	; 0x278 <__vector_13+0xc2>
         
        case 1:
        GPIO_write_low(&PORTB,LED_D2);
 256:	64 e0       	ldi	r22, 0x04	; 4
 258:	85 e2       	ldi	r24, 0x25	; 37
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 65 00 	call	0xca	; 0xca <GPIO_write_low>
        break;
 260:	0b c0       	rjmp	.+22     	; 0x278 <__vector_13+0xc2>
        
        case 2:
        GPIO_write_low(&PORTB,LED_D3);
 262:	63 e0       	ldi	r22, 0x03	; 3
 264:	85 e2       	ldi	r24, 0x25	; 37
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 65 00 	call	0xca	; 0xca <GPIO_write_low>
        break;
 26c:	05 c0       	rjmp	.+10     	; 0x278 <__vector_13+0xc2>
        
        case 3:
        GPIO_write_low(&PORTB,LED_D4);
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	85 e2       	ldi	r24, 0x25	; 37
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 65 00 	call	0xca	; 0xca <GPIO_write_low>
        break;
    }

}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
