
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080013c  0080013c  000004aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d48  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000677  00000000  00000000  00001c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000509  00000000  00000000  0000299b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_18>
  4c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 38       	cpi	r26, 0x81	; 129
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 79 01 	call	0x2f2	; 0x2f2 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	1f 93       	push	r17
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <__vector_13+0x2a>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 106:	80 e3       	ldi	r24, 0x30	; 48
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 10e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	09 f1       	breq	.+66     	; 0x158 <__vector_13+0x80>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	89 f1       	breq	.+98     	; 0x17c <__vector_13+0xa4>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_13+0x48>
 11e:	47 c0       	rjmp	.+142    	; 0x1ae <__vector_13+0xd6>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        state = STATE_SEND;
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        addr++;
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        // If slave address is between 8 and 119 then move to SEND state
        if (addr == 120) {
 130:	88 37       	cpi	r24, 0x78	; 120
 132:	09 f0       	breq	.+2      	; 0x136 <__vector_13+0x5e>
 134:	3f c0       	rjmp	.+126    	; 0x1b4 <__vector_13+0xdc>
            addr = 8;
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            TIM1_stop();
 13c:	e1 e8       	ldi	r30, 0x81	; 129
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	88 7f       	andi	r24, 0xF8	; 248
 144:	80 83       	st	Z, r24
            uart_puts("\r\n");
 146:	8d e1       	ldi	r24, 0x1D	; 29
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_puts>
            uart_puts("---I2C SCAN done---"); 
 14e:	80 e2       	ldi	r24, 0x20	; 32
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_puts>
 156:	2e c0       	rjmp	.+92     	; 0x1b4 <__vector_13+0xdc>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15c:	88 0f       	add	r24, r24
 15e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <twi_start>
 162:	18 2f       	mov	r17, r24
        twi_stop();
 164:	0e 94 1d 01 	call	0x23a	; 0x23a <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
        if(result==0){
 168:	11 11       	cpse	r17, r1
 16a:	04 c0       	rjmp	.+8      	; 0x174 <__vector_13+0x9c>
            state = STATE_ACK;
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 172:	20 c0       	rjmp	.+64     	; 0x1b4 <__vector_13+0xdc>
            }
        else {
            state = STATE_IDLE;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 17a:	1c c0       	rjmp	.+56     	; 0x1b4 <__vector_13+0xdc>
        break;

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE   
        uart_puts("\r\n");
 17c:	8d e1       	ldi	r24, 0x1D	; 29
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_puts>
        uart_puts("add: 0x");
 184:	84 e3       	ldi	r24, 0x34	; 52
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 18c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 190:	40 e1       	ldi	r20, 0x10	; 16
 192:	be 01       	movw	r22, r28
 194:	6f 5f       	subi	r22, 0xFF	; 255
 196:	7f 4f       	sbci	r23, 0xFF	; 255
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 b6 01 	call	0x36c	; 0x36c <__itoa_ncheck>
        itoa(addr,uart_string,16);
        uart_puts(uart_string);
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_puts>
        state = STATE_IDLE;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <__vector_13+0xdc>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
    }
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	1f 91       	pop	r17
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 1e0:	87 b1       	in	r24, 0x07	; 7
 1e2:	8f 7c       	andi	r24, 0xCF	; 207
 1e4:	87 b9       	out	0x07, r24	; 7
 1e6:	88 b1       	in	r24, 0x08	; 8
 1e8:	80 63       	ori	r24, 0x30	; 48
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	e9 eb       	ldi	r30, 0xB9	; 185
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8c 7f       	andi	r24, 0xFC	; 252
 1f4:	80 83       	st	Z, r24
 1f6:	88 e9       	ldi	r24, 0x98	; 152
 1f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 1fc:	08 95       	ret

000001fe <twi_start>:
 1fe:	94 ea       	ldi	r25, 0xA4	; 164
 200:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 204:	ec eb       	ldi	r30, 0xBC	; 188
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	90 81       	ld	r25, Z
 20a:	99 23       	and	r25, r25
 20c:	ec f7       	brge	.-6      	; 0x208 <twi_start+0xa>
 20e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 212:	84 e8       	ldi	r24, 0x84	; 132
 214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 218:	ec eb       	ldi	r30, 0xBC	; 188
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <twi_start+0x1e>
 222:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 226:	98 7f       	andi	r25, 0xF8	; 248
 228:	98 31       	cpi	r25, 0x18	; 24
 22a:	29 f0       	breq	.+10     	; 0x236 <twi_start+0x38>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 34       	cpi	r25, 0x40	; 64
 230:	19 f4       	brne	.+6      	; 0x238 <twi_start+0x3a>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret

0000023a <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 23a:	84 e9       	ldi	r24, 0x94	; 148
 23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 240:	08 95       	ret

00000242 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
 256:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 25a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 25e:	8c 71       	andi	r24, 0x1C	; 28
 260:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <UART_RxHead>
 264:	ef 5f       	subi	r30, 0xFF	; 255
 266:	ef 71       	andi	r30, 0x1F	; 31
 268:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <UART_RxTail>
 26c:	e9 17       	cp	r30, r25
 26e:	39 f0       	breq	.+14     	; 0x27e <__vector_18+0x3c>
 270:	e0 93 3e 01 	sts	0x013E, r30	; 0x80013e <UART_RxHead>
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ef 5b       	subi	r30, 0xBF	; 191
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	20 83       	st	Z, r18
 27c:	01 c0       	rjmp	.+2      	; 0x280 <__vector_18+0x3e>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <__data_end>
 284:	89 2b       	or	r24, r25
 286:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_19>:
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
 2b0:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <UART_TxHead>
 2b4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <UART_TxTail>
 2b8:	98 17       	cp	r25, r24
 2ba:	69 f0       	breq	.+26     	; 0x2d6 <__vector_19+0x38>
 2bc:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <UART_TxTail>
 2c0:	ef 5f       	subi	r30, 0xFF	; 255
 2c2:	ef 71       	andi	r30, 0x1F	; 31
 2c4:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <UART_TxTail>
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ef 59       	subi	r30, 0x9F	; 159
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	80 81       	ld	r24, Z
 2d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <__vector_19+0x42>
 2d6:	e1 ec       	ldi	r30, 0xC1	; 193
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	8f 7d       	andi	r24, 0xDF	; 223
 2de:	80 83       	st	Z, r24
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <uart_init>:
 2f2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <UART_TxHead>
 2f6:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <UART_TxTail>
 2fa:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <UART_RxHead>
 2fe:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <UART_RxTail>
 302:	99 23       	and	r25, r25
 304:	1c f4       	brge	.+6      	; 0x30c <uart_init+0x1a>
 306:	22 e0       	ldi	r18, 0x02	; 2
 308:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 30c:	90 78       	andi	r25, 0x80	; 128
 30e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 312:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 316:	88 e9       	ldi	r24, 0x98	; 152
 318:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 322:	08 95       	ret

00000324 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 324:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <UART_TxHead>
 328:	2f 5f       	subi	r18, 0xFF	; 255
 32a:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 32c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <UART_TxTail>
 330:	29 17       	cp	r18, r25
 332:	e1 f3       	breq	.-8      	; 0x32c <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 334:	e2 2f       	mov	r30, r18
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ef 59       	subi	r30, 0x9F	; 159
 33a:	fe 4f       	sbci	r31, 0xFE	; 254
 33c:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 33e:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 342:	e1 ec       	ldi	r30, 0xC1	; 193
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 62       	ori	r24, 0x20	; 32
 34a:	80 83       	st	Z, r24
 34c:	08 95       	ret

0000034e <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	ec 01       	movw	r28, r24
    while (*s)
 354:	88 81       	ld	r24, Y
 356:	88 23       	and	r24, r24
 358:	31 f0       	breq	.+12     	; 0x366 <uart_puts+0x18>
 35a:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 35c:	0e 94 92 01 	call	0x324	; 0x324 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 360:	89 91       	ld	r24, Y+
 362:	81 11       	cpse	r24, r1
 364:	fb cf       	rjmp	.-10     	; 0x35c <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <__itoa_ncheck>:
 36c:	bb 27       	eor	r27, r27
 36e:	4a 30       	cpi	r20, 0x0A	; 10
 370:	31 f4       	brne	.+12     	; 0x37e <__itoa_ncheck+0x12>
 372:	99 23       	and	r25, r25
 374:	22 f4       	brpl	.+8      	; 0x37e <__itoa_ncheck+0x12>
 376:	bd e2       	ldi	r27, 0x2D	; 45
 378:	90 95       	com	r25
 37a:	81 95       	neg	r24
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	0c 94 c2 01 	jmp	0x384	; 0x384 <__utoa_common>

00000382 <__utoa_ncheck>:
 382:	bb 27       	eor	r27, r27

00000384 <__utoa_common>:
 384:	fb 01       	movw	r30, r22
 386:	55 27       	eor	r21, r21
 388:	aa 27       	eor	r26, r26
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	aa 1f       	adc	r26, r26
 390:	a4 17       	cp	r26, r20
 392:	10 f0       	brcs	.+4      	; 0x398 <__utoa_common+0x14>
 394:	a4 1b       	sub	r26, r20
 396:	83 95       	inc	r24
 398:	50 51       	subi	r21, 0x10	; 16
 39a:	b9 f7       	brne	.-18     	; 0x38a <__utoa_common+0x6>
 39c:	a0 5d       	subi	r26, 0xD0	; 208
 39e:	aa 33       	cpi	r26, 0x3A	; 58
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <__utoa_common+0x20>
 3a2:	a9 5d       	subi	r26, 0xD9	; 217
 3a4:	a1 93       	st	Z+, r26
 3a6:	00 97       	sbiw	r24, 0x00	; 0
 3a8:	79 f7       	brne	.-34     	; 0x388 <__utoa_common+0x4>
 3aa:	b1 11       	cpse	r27, r1
 3ac:	b1 93       	st	Z+, r27
 3ae:	11 92       	st	Z+, r1
 3b0:	cb 01       	movw	r24, r22
 3b2:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <strrev>

000003b6 <strrev>:
 3b6:	dc 01       	movw	r26, r24
 3b8:	fc 01       	movw	r30, r24
 3ba:	67 2f       	mov	r22, r23
 3bc:	71 91       	ld	r23, Z+
 3be:	77 23       	and	r23, r23
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <strrev+0x4>
 3c2:	32 97       	sbiw	r30, 0x02	; 2
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <strrev+0x18>
 3c6:	7c 91       	ld	r23, X
 3c8:	6d 93       	st	X+, r22
 3ca:	70 83       	st	Z, r23
 3cc:	62 91       	ld	r22, -Z
 3ce:	ae 17       	cp	r26, r30
 3d0:	bf 07       	cpc	r27, r31
 3d2:	c8 f3       	brcs	.-14     	; 0x3c6 <strrev+0x10>
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
